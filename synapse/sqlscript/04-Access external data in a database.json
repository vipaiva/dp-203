{
	"name": "04-Access external data in a database",
	"properties": {
		"folder": {
			"name": "dp-203/02-Serverless SQL/02-Demo-Query files using a serverless SQL pool"
		},
		"content": {
			"query": "-- Demo: Query files using a serverless SQL pool\n-- Task: Access external data in a database\nDROP DATABASE Sales\nGO;\n\nCREATE DATABASE Sales\nCOLLATE Latin1_General_100_BIN2_UTF8;\nGO;\n\nUse Sales\n\nCREATE EXTERNAL DATA SOURCE sales_data WITH (\n    LOCATION = 'https://datalakevipaiva.dfs.core.windows.net/files/labs-dp-500/01/data/'\n);\nGO;\n\n-- The following query uses the external data source to connect to the data lake, and the OPENROWSET function \n-- now only need to reference the relative path to the .csv files.\n\nSELECT *\nFROM\n    OPENROWSET(\n        BULK '*.csv',\n        DATA_SOURCE = 'sales_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS orders\n\n\n-- Query the parquet files using the data source, sales data for 2019 file\n\nSELECT *\nFROM  \n    OPENROWSET(\n        BULK '*.snappy.parquet',\n        DATA_SOURCE = 'sales_data',\n        FORMAT='PARQUET'\n    ) AS orders\nWHERE replace(orders.filepath(1), '.snappy', '') = '2019'\n\n-- The external data source makes it easier to access the files in the data lake, but most data analysts using SQL \n-- are used to working with tables in a database. Fortunately, you can also define external file formats and external\n-- tables that encapsulate rowsets from files in database tables.\n\nCREATE EXTERNAL FILE FORMAT CsvFormat\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS(\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"'\n        )\n    );\nGO;\n\nCREATE EXTERNAL TABLE dbo.orders\n(\n    SalesOrderNumber VARCHAR(10),\n    SalesOrderLineNumber INT,\n    OrderDate DATE,\n    CustomerName VARCHAR(25),\n    EmailAddress VARCHAR(50),\n    Item VARCHAR(30),\n    Quantity INT,\n    UnitPrice DECIMAL(18,2),\n    TaxAmount DECIMAL (18,2)\n)\nWITH\n(\n    DATA_SOURCE =sales_data,\n    LOCATION = '*.csv',\n    FILE_FORMAT = CsvFormat\n);\nGO\n\n-- Now that you’ve explored various ways to query files in the data lake by using SQL queries, you can analyze \n-- the results of these queries to gain insights into the data. Often, insights are easier to uncover by visualizing \n-- the query results in a chart; which you can easily do by using the integrated charting functionality in the Synapse Studio query editor.\n\n--visualization > bar > category: orderyear  > legend: grossrevenue\n\nSELECT YEAR(OrderDate) AS OrderYear,\n    SUM((UnitPrice * Quantity) + TaxAmount) AS GrossRevenue\nFROM dbo.orders\nGROUP BY YEAR(OrderDate)\nORDER BY OrderYear;\n\n-- Cleanup\nDROP EXTERNAL TABLE dbo.orders\nDROP EXTERNAL TABLE dbo.ProductSalesTotals\nDROP EXTERNAL TABLE dbo.YearlySalesTotals\nDROP EXTERNAL FILE FORMAT ParquetFormat\nDROp EXTERNAL FILE FORMAT CsvFormat\nDROP EXTERNAL DATA SOURCE sales_data\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "Sales",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}