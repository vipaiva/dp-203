{
	"name": "02-Create Sales DB with External table",
	"properties": {
		"folder": {
			"name": "dp-203/02-Serverless SQL/03-Lab-Transform files using a serverless SQL pool"
		},
		"content": {
			"query": "-- Lab: Transform files using a serverless SQL pool\n-- Task: Create Sales DB with External table\n\n-- By defining an external data source in a database, you can use it to reference the data lake \n-- location where you want to store files for external tables. An external file format enables \n-- you to define the format for those files - for example, Parquet or CSV. To use these objects \n-- to work with external tables, you need to create them in a database other than the \n-- default master database.\n\nDROP DATABASE Sales\nGO;\n\n-- Database for sales data\nCREATE DATABASE Sales\n  COLLATE Latin1_General_100_BIN2_UTF8;\nGO;\n\nUse Sales;\nGO;\n\n-- External data is in the Files container in the data lake\nCREATE EXTERNAL DATA SOURCE sales_data WITH (\n    LOCATION = 'https://datalakevipaiva.dfs.core.windows.net/files/labs-dp-203/02/data/'\n);\nGO;\n\n-- Format for table files\nCREATE EXTERNAL FILE FORMAT ParquetFormat\n    WITH (\n            FORMAT_TYPE = PARQUET,\n            DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n        )\nGO;\n\n-- retrieve and aggregate data from the CSV sales files by using the external data source\n-- note that the BULK path is relative to the folder location on which the data source is defined:\nSELECT Item AS Product,\n       SUM(Quantity) AS ItemsSold,\n       ROUND(SUM(UnitPrice) - SUM(TaxAmount), 2) AS NetRevenue\nFROM\n    OPENROWSET(\n        BULK '*.csv', -- originally: sales/csv/*.csv\n        DATA_SOURCE = 'sales_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n        WITH(\n        SalesOrderNumber VARCHAR(10),\n        SalesOrderLineNumber INT,\n        OrderDate DATE,\n        CustomerName VARCHAR(25),\n        EmailAddress VARCHAR(50),\n        Item VARCHAR(50),\n        Quantity INT,\n        UnitPrice DECIMAL(18,2),\n        TaxAmount DECIMAL (18,2)\n    ) AS orders\nGROUP BY Item;\n\n-- save the results of query in an external table, like this:\nCREATE EXTERNAL TABLE ProductSalesTotals\n    WITH (\n        LOCATION = 'L3/data/productsales/',\n        DATA_SOURCE = sales_data,\n        FILE_FORMAT = ParquetFormat\n    )\nAS\nSELECT Item AS Product,\n    SUM(Quantity) AS ItemsSold,\n    ROUND(SUM(UnitPrice) - SUM(TaxAmount), 2) AS NetRevenue\nFROM\n    OPENROWSET(\n        BULK '*.csv', -- originally: sales/csv/*.csv\n        DATA_SOURCE = 'sales_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n        WITH(\n        SalesOrderNumber VARCHAR(10),\n        SalesOrderLineNumber INT,\n        OrderDate DATE,\n        CustomerName VARCHAR(25),\n        EmailAddress VARCHAR(50),\n        Item VARCHAR(50),\n        Quantity INT,\n        UnitPrice DECIMAL(18,2),\n        TaxAmount DECIMAL (18,2)\n    ) AS orders\nGROUP BY Item;\n\n-- Make sure to navigate to the files section: \n-- labs/03/data/productsales/\n-- Observe that one or more files with names similar to ABC123DE----.parquet have been created. \n-- These files contain the aggregated product sales data. \n-- To prove this, you can select one of the files and use the New SQL script > Select TOP 100 rows menu to query it directly.\n-- This is auto-generated code:\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakevipaiva.dfs.core.windows.net/files/labs-dp-203/02/data/L3/data/productsales/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n-- Make sure to look in the Data hub, (refresh SQL Database)\n-- Notice the Sales database, external table name dbo.ProductSalesTotals\n\n-- Run following query\nSELECT TOP 10 * FROM ProductSalesTotals\n\n\n-- Clean up\nDROP EXTERNAL TABLE ProductSalesTotals\nDROP EXTERNAL FILE FORMAT ParquetFormat\nDROP EXTERNAL DATA SOURCE sales_data\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "Sales",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}